// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// users
model User {
  id                   String                 @id @default(uuid())
  name                 String
  email                String                 @unique
  password             String
  role                 Role                   @default(user)
  isVerified           Boolean                @default(false) @map("is_verified")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  orders               Order[]
  notifications        Notification[]
  questions            Question[]
  avatar               Avatar?
  course               Course[]
  review               Review[]
  questionReplay       QuestionReplay[]
  commentReplayForUser CommentReplayForUser[]
  comment              Comment[]

  @@map("user")
}

enum Role {
  user
  admin
}

model Avatar {
  id        String @id @default(uuid())
  public_id String @unique
  url       String
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
}

// review
model Review {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  rating    Int
  courseId  String    @map("course_id")
  course    Course    @relation(fields: [courseId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  comments  Comment[]

  @@map("review")
}

model Comment {
  id                   String                 @id @default(uuid())
  comment              String
  courseId             String
  course               Course                 @relation(fields: [courseId], references: [id])
  userId               String                 @map("user_id")
  user                 User                   @relation(fields: [userId], references: [id])
  reviewId             String
  review               Review                 @relation(fields: [reviewId], references: [id])
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  commentReplayForUser CommentReplayForUser[]

  @@map("comment")
}

model CommentReplayForUser {
  id        String   @id @default(uuid())
  reply     String
  commentId String   @map("comment_id")
  comment   Comment  @relation(fields: [commentId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Course {
  id            String   @id @default(uuid())
  name          String
  description   String
  price         Int
  estimatePrice Int      @map("estimate_price")
  level         String
  demoUrl       String   @map("demo_url")
  isPublished   Boolean  @default(false) @map("is_published")
  courseRatings Int      @map("course_ratings")
  purchase      Int
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id])
  tagId         String   @map("tag_id")
  tag           Tags     @relation(fields: [tagId], references: [id])
  categoryId    String   @map("category_id")
  category      Category @relation(fields: [categoryId], references: [id])
  thumbnail     String
  public_id     String   @unique
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  review       Review[]
  benefit      Benefit[]
  prerequisite Prerequisite[]
  courseData   CourseData[]

  order   Order[]
  comment Comment[]

  @@map("course")
}

model Category {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  course    Course[]

  @@map("category")
}

model Tags {
  id        String   @id @default(uuid())
  tag       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  course    Course[]

  @@map("tag")
}

model Benefit {
  id        String   @id @default(uuid())
  benefit   String
  courseId  String   @map("course_id")
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("benefit")
}

model Prerequisite {
  id           String   @id @default(uuid())
  prerequisite String
  courseId     String   @map("course_id")
  course       Course   @relation(fields: [courseId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("prerequisite")
}

model CourseData {
  id           String     @id @default(uuid())
  videoUrl     String     @map("video_url")
  title        String
  description  String
  videoSection String     @map("video_section")
  videoLength  Int        @map("video_length")
  courseId     String     @map("course_id")
  course       Course     @relation(fields: [courseId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  links        Links[]
  question     Question[]

  @@map("course_data")
}

model Links {
  id           String     @id @default(uuid())
  title        String
  url          String
  courseDataId String     @map("course_data_id")
  courseData   CourseData @relation(fields: [courseDataId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("links")
}

model Question {
  id             String           @id @default(uuid())
  userId         String           @map("user_id")
  user           User             @relation(fields: [userId], references: [id])
  question       String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  courseDataId   String           @map("course_data_id")
  courseData     CourseData       @relation(fields: [courseDataId], references: [id])
  questionReplay QuestionReplay[]

  @@map("question")
}

model QuestionReplay {
  id         String   @id @default(uuid())
  reply      String
  questionId String   @map("comment_id")
  question   Question @relation(fields: [questionId], references: [id])
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
}

model Notification {
  id      String @id @default(uuid())
  message String
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notification")
}

model Order {
  id       String @id @default(uuid())
  couserId String @map("course_id")
  course   Course @relation(fields: [couserId], references: [id])
  userId   String @map("user_id")
  user     User   @relation(fields: [userId], references: [id])

  paymentInfo Json     @map("payment_info")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("order")
}

// faq
model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("faq")
}
